targetScope = 'resourceGroup'

// ------------------
//    PARAMETERS
// ------------------

@description('The location where the resources will be created.')
param location string = resourceGroup().location

@description('Optional. The prefix to be used for all resources created by this template.')
param prefix string = ''

@description('Optional. The projectName to be used for all resources created by this template.')
param projectName string = ''

@description('Optional. The tags to be assigned to the created resources.')
param tags object = {}

// Container Apps Env / Log Analytics Workspace / Application Insights
@description('Optional. The name of the container apps environment. If set, it overrides the name generated by the template.')
param containerAppsEnvironmentName string = '${prefix}-${projectName}-cae'

@description('Optional. The name of the log analytics workspace. If set, it overrides the name generated by the template.')
param logAnalyticsWorkspaceName string = '${prefix}-${projectName}-law'

@description('Optional. The name of the application insights. If set, it overrides the name generated by the template.')
param applicationInsightName string = '${prefix}-${projectName}-ai'

@description('The key vault name store secrets')
param KEYVAULT_NAME string = '${prefix}-${projectName}-kv'

@description('The name of the container registry.')
param containerRegistryName string

@description('Azure openai resource name')
param azureOpenAiResourceName string = '${prefix}-${projectName}-oai'

// ------------------
// RESOURCES
// ------------------

module containerRegistry 'modules/container-registry.bicep' = {
  name: 'containerRegistry-${uniqueString(resourceGroup().id)}'
  params: {
    containerRegistryName: containerRegistryName
    location: location
    acrSku: 'Standard'
  }
}



module containerAppsEnvironment 'modules/container-apps-environment.bicep' ={
  name: 'containerAppsEnv-${uniqueString(resourceGroup().id)}'
  params: {
   containerAppsEnvironmentName: containerAppsEnvironmentName
   logAnalyticsWorkspaceName: logAnalyticsWorkspaceName
   applicationInsightName: applicationInsightName
    location: location
    tags: tags
  }
}

module keyVault 'modules/key-vault.bicep' = {
  name: 'keyVault-${uniqueString(resourceGroup().id)}'
  params: {
    KEYVAULT_NAME: KEYVAULT_NAME
    location: location
    tags: tags
  }
}

module azureoai 'modules/azure-openai.bicep' = {
  name: azureOpenAiResourceName
  params: {
    location: location
    tags: tags
    cognitiveServiceName: azureOpenAiResourceName
  }
}
