targetScope = 'resourceGroup'

// ------------------
//    PARAMETERS
// ------------------

@description('The location where the resources will be created.')
param location string = resourceGroup().location

@description('Optional. The prefix to be used for all resources created by this template.')
param prefix string = ''

@description('Optional. The suffix to be used for all resources created by this template.')
param suffix string = ''

@description('Optional. The tags to be assigned to the created resources.')
param tags object = {}

// Container Apps Env / Log Analytics Workspace / Application Insights
@description('Optional. The name of the container apps environment. If set, it overrides the name generated by the template.')
param containerAppsEnvironmentName string = '${prefix}-cae-${suffix}'

@description('Optional. The name of the log analytics workspace. If set, it overrides the name generated by the template.')
param logAnalyticsWorkspaceName string = '${prefix}-law-${suffix}'

@description('Optional. The name of the application insights. If set, it overrides the name generated by the template.')
param applicationInsightName string = '${prefix}appi-${suffix}'

@description('The name of the service for the frontend web api service.')
param frontendWebApiServiceName string

@description('The key vault name store secrets')
param KEYVAULT_NAME string = '${prefix}-kv-${suffix}'

@description('The name of the container registry.')
param containerRegistryName string

// App Ports
@description('The target and dapr port for the frontend web app service.')
param frontendWebApiPortNumber int = 80

// ------------------
// RESOURCES
// ------------------

module containerAppsEnvironment 'modules/container-apps-environment.bicep' ={
  name: 'containerAppsEnv-${uniqueString(resourceGroup().id)}'
  params: {
   containerAppsEnvironmentName: containerAppsEnvironmentName
   logAnalyticsWorkspaceName: logAnalyticsWorkspaceName
   applicationInsightName: applicationInsightName
    location: location
    tags: tags
  }
}

module keyVault 'modules/key-vault.bicep' = {
  name: 'keyVault-${uniqueString(resourceGroup().id)}'
  params: {
    KEYVAULT_NAME: KEYVAULT_NAME
    location: location
    tags: tags
  }
}



module containerApps 'modules/container-apps.bicep' = {
  name: 'containerApps-${uniqueString(resourceGroup().id)}'
  params: {
    location: location
    tags: tags    
    frontendWebApiServiceName: frontendWebApiServiceName    
    containerAppsEnvironmentName: containerAppsEnvironmentName 
    containerRegistryName: containerRegistryName
    applicationInsightsName: applicationInsightName
    frontendWebApiPortNumber: frontendWebApiPortNumber
    frontendWebApiServiceImage: 'mcr.microsoft.com/azure-samples/azure-voting-app-redis:latest'
  }
}

// ------------------
// OUTPUTS
// ------------------

@description('The name of the container app for the front end web app service.')
output frontendWebAppServiceContainerAppName string = containerApps.outputs.frontendWebApiServiceContainerAppName

@description('The FQDN of the front end web app.')
output frontendWebAppServiceFQDN string = containerApps.outputs.frontendWebApiServiceFQDN
